// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comments.sql

package store

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (user_id, comment) VALUES ($1, $2)
RETURNING id, user_id, comment, created_at
`

type CreateCommentParams struct {
	UserID  int32
	Comment string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.UserID, arg.Comment)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1 AND user_id = $2
`

type DeleteCommentParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) error {
	_, err := q.db.ExecContext(ctx, deleteComment, arg.ID, arg.UserID)
	return err
}

const getAllComments = `-- name: GetAllComments :many
SELECT id, user_id, comment, created_at FROM comments ORDER BY created_at DESC
`

func (q *Queries) GetAllComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, user_id, comment, created_at FROM comments WHERE id = $1
`

func (q *Queries) GetCommentByID(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}
